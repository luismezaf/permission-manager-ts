{"version":3,"file":"index.js","sources":["index.js"],"sourcesContent":["export function definePermissions(permissions, options) {\n    function hasPermissionTo(permission, activePermissions) {\n        // Check if the permission is directly included in the activePermissions list\n        if (activePermissions.includes(permission)) {\n            return true;\n        }\n        // Return false early if no options are provided\n        if (!options)\n            return false;\n        // Check group permissions: if a group key exists in activePermissions, all its associated permissions are granted\n        // Example: if 'users.all' is in activePermissions, both 'create.user' and 'update_admin.user' are granted\n        if (options.groups) {\n            for (const group in options.groups) {\n                if (activePermissions.includes(group) &&\n                    options.groups[group].includes(permission)) {\n                    return true;\n                }\n            }\n        }\n        // Check alias permissions: if the alias of a permission exists in activePermissions, the permission is granted\n        const aliasValue = options.alias\n            ? Reflect.get(options.alias, permission)\n            : null;\n        if (aliasValue && activePermissions.includes(aliasValue)) {\n            return true;\n        }\n        return false;\n    }\n    function evalPermissions(activePermissions) {\n        const result = {};\n        for (const permission of permissions) {\n            // Format the permission string to a camelCase style starting with 'can'\n            const formattedKey = `can${permission.replace(/^(.)|[^a-zA-Z]+(.)/g, (_match, first, next) => first ? first.toUpperCase() : next.toUpperCase())}`;\n            // Create a validator function for each permission\n            const validatorFunction = () => hasPermissionTo(permission, activePermissions);\n            Reflect.set(result, formattedKey, validatorFunction);\n        }\n        return result;\n    }\n    return {\n        grant: (activePermissions) => evalPermissions(activePermissions),\n    };\n}\n//# sourceMappingURL=index.js.map"],"names":["definePermissions","permissions","options","evalPermissions","activePermissions","result","permission","formattedKey","replace","_match","first","next","toUpperCase","Reflect","set","hasPermissionTo","includes","groups","group","aliasValue","alias","get","grant"],"mappings":"aAAO,SAASA,kBAAkBC,EAAaC,GA4B3C,SAASC,EAAgBC,GACrB,IAAMC,EAAS,GACf,IAAK,MAAMC,KAAcL,EAAa,CAElC,IAAMM,EAAe,MAAMD,EAAWE,QAAQ,sBAAuB,CAACC,EAAQC,EAAOC,KAASD,GAA8BC,GAAhBC,YAAW,CAAuB,EAG9IC,QAAQC,IAAIT,EAAQE,EADM,KAAMQ,IAjCfT,EAiC+BA,EAjCnBF,EAiC+BA,EA/BhE,GAAIA,EAAkBY,SAASV,CAAU,EACrC,MAAO,CAAA,EAGX,GAAI,CAACJ,EACD,MAAO,CAAA,EAGX,GAAIA,EAAQe,OACR,IAAK,MAAMC,KAAShB,EAAQe,OACxB,GAAIb,EAAkBY,SAASE,CAAK,GAChChB,EAAQe,OAAOC,GAAOF,SAASV,CAAU,EACzC,MAAO,CAAA,EAKnB,IAAMa,EAAajB,EAAQkB,MACrBP,QAAQQ,IAAInB,EAAQkB,MAAOd,CAAU,EACrC,KACN,MAAIa,EAAAA,CAAAA,GAAcf,CAAAA,EAAkBY,SAASG,CAAU,EAW0B,CAC1B,CACtD,CACD,OAAOd,CACV,CACD,MAAO,CACHiB,MAAO,GAAuBnB,EAAgBC,CAAiB,CACvE,CACA"}